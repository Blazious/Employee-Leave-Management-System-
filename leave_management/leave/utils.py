# leave/utils.py

import requests
from datetime import date, timedelta
from io import BytesIO
from django.conf import settings
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from .models import LeaveBalance, LeaveRequest

# -------------------------------
# 1️⃣ Calendric API: Kenya Holidays
# -------------------------------
def get_kenya_holidays(year: int):
    """
    Fetch Kenya public holidays from Calendric API.
    Returns a list of date objects.
    """
    API_KEY = getattr(settings, "CALENDRIC_API_KEY", None)
    if not API_KEY:
        return []  # fallback to empty list if API key not set

    BASE_URL = "https://calendric.com/api/v1/holidays"
    params = {
        "country": "KE",
        "year": year,
        "api_key": API_KEY
    }

    try:
        response = requests.get(BASE_URL, params=params, timeout=5)
        response.raise_for_status()
        holidays = response.json()  # adjust if API response structure differs
        return [date.fromisoformat(h['date']) for h in holidays]
    except Exception as e:
        print(f"Error fetching holidays: {e}")
        return []

# -------------------------------
# 2️⃣ Calculate Leave Days
# -------------------------------
def calculate_leave_days(start_date: date, end_date: date) -> int:
    """
    Calculate total leave days excluding weekends and Kenyan public holidays.
    """
    holidays = get_kenya_holidays(start_date.year)
    total_days = 0
    current_day = start_date

    while current_day <= end_date:
        if current_day.weekday() < 5 and current_day not in holidays:  # Mon-Fri and not holiday
            total_days += 1
        current_day += timedelta(days=1)
    
    return total_days

# -------------------------------
# 3️⃣ Update Leave Balance
# -------------------------------
def update_leave_balance(employee, leave_type, days_taken: int):
    """
    Deduct approved leave days from the employee's leave balance.
    """
    leave_balance, _ = LeaveBalance.objects.get_or_create(
        employee=employee,
        leave_type=leave_type,
        defaults={"days_remaining": 0}
    )
    leave_balance.days_remaining = max(leave_balance.days_remaining - days_taken, 0)
    leave_balance.save()
    return leave_balance

# -------------------------------
# 4️⃣ Generate Leave PDF
# -------------------------------
def generate_leave_pdf(leave_request: LeaveRequest) -> BytesIO:
    """
    Generate a PDF for a leave request including approvals and comments.
    Returns a BytesIO object.
    """
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Company Logo placeholder
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(width/2, height - 50, "COMPANY LOGO")

    # Title
    c.setFont("Helvetica-Bold", 14)
    c.drawCentredString(width/2, height - 80, "LEAVE REQUEST FORM")

    # Employee & Department
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 120, f"Employee: {leave_request.employee.username} ({leave_request.employee.employee_id})")
    dept_name = leave_request.employee.department.name if leave_request.employee.department else "N/A"
    c.drawString(50, height - 140, f"Department: {dept_name}")

    # Leave Details
    c.drawString(50, height - 170, f"Leave Type: {leave_request.leave_type.name if leave_request.leave_type else 'N/A'}")
    c.drawString(50, height - 190, f"Start Date: {leave_request.start_date}")
    c.drawString(50, height - 210, f"End Date: {leave_request.end_date}")
    total_days = (leave_request.end_date - leave_request.start_date).days + 1
    c.drawString(50, height - 230, f"Total Days: {total_days}")
    c.drawString(50, height - 250, f"Reason: {leave_request.reason}")

    # Approval
    approver_name = leave_request.approved_by.username if leave_request.approved_by else "Pending"
    c.drawString(50, height - 280, f"Approved By: {approver_name}")
    c.drawString(50, height - 300, f"Status: {leave_request.status}")
    c.drawString(50, height - 320, f"Comments: {leave_request.comments if leave_request.comments else 'N/A'}")

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.drawString(50, 50, "Generated by ELMS")

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer
